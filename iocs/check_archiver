#!/bin/sh

# Nagios plugin for checking archiver status
# Must be called with server name and optional other arguments

# Possible return codes:
#   0 => Server OK
#   1 => Server warning
#   2 => Server unreachable
#   3 => Other error, eg invalid call

warning()
{
    echo -n FA ARCHIVER WARNING: "$@"
    send_all_stats
    exit 1
}

unreachable()
{
    echo FA ARCHIVER UNREACHABLE: "$@"
    exit 2
}

# Nagios messages must be written to stdout as stderr is discarded!
error()
{
    echo FA ARCHIVER UNKNOWN: "$@"
    exit 3
}

# Usage has to behave like a kind of error!
usage()
{
    cat <<EOF
Usage: check_archiver [options] <archiver-address>

Options:
    -h  Show this help
    -p: Specify archiver port (default is 8888)
    -v  Generate performance data
    -s: Specify separator for performance data (default is ' ')
    -X  Use DS command (will generate warning if not supported by archiver)
EOF
    exit 3
}


# Send command to archiver, exits if unreachable
command()
{
    RESULT="$(echo "$@" | nc -w1 "$HOSTNAME" "$PORT")"  ||
    unreachable "Unable to contact $HOSTNAME:$PORT"
}


# Sends values of named variables in Nagios statistics format
send_stats()
{
    local sep='|'
    local stat
    for stat; do
        eval echo -n \"\${sep}$stat=\$$stat\"
        sep="$SEP"
    done
}

send_all_stats()
{
    ((VERBOSE))  &&
    send_stats link_partner client_count frame_errors soft_errors hard_errors
    echo
}


PORT=8888
SEP=' '
VERBOSE=0
DEBUG_STATUS=0
while getopts 'hp:vs:X' option; do
    case "$option" in
    h)  usage ;;
    p)  PORT="$OPTARG" ;;
    v)  VERBOSE=1 ;;
    s)  SEP="$OPTARG" ;;
    X)  DEBUG_STATUS=1 ;;
    *)  error 'Invalid option: try -h for help' ;;
    esac
done
shift $((OPTIND-1))
(( "$#" == 1 ))  ||  error 'Must specify archiver name'
HOSTNAME="$1"


# Check the sniffer hardware status
command CS
[[ "$RESULT" =~ ^([0-9]+\ ){6}[01]\ [01] ]]  ||
    error "Invalid response '$RESULT' to CS command"
read link_status link_partner last_interrupt \
    frame_errors soft_errors hard_errors run_state overrun <<<"$RESULT"

# Count the number of connected clients
command CI
client_count="$(echo "$RESULT" | wc -l)"

# Analyse data capture status: returns flags indicating if capture is halted
if ((DEBUG_STATUS)); then
    command DS
    [[ "$RESULT" =~ ^[01]\ [01] ]]  ||
        error "Invalid response '$RESULT' to DS command"
    read capture_active disk_writing <<<"$RESULT"

    (( $capture_active ))  ||
        warning "Data capture halted"
    (( $disk_writing ))  ||
        warning "Data archival halted"
fi

# At this point we've captured everything we expect to.

# Generate warning if any of the appropriate errors is indicated
(( $link_status == 1 )) ||
    warning "Link error $link_status/$link_partner"
(( $link_partner < 1023 )) ||
    warning "Link disconnected"
(( $last_interrupt == 1 )) ||
    warning "Last interrupt error: $last_interrupt"
(( $run_state ))  ||
    warning "Sniffer halted"


# All seems well: report what we have to say
echo -n "FA ARCHIVER OK"
send_all_stats
exit 0

# vim: set filetype=bash:
